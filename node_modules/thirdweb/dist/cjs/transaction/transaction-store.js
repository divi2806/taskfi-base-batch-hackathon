"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTransactionStore = getTransactionStore;
exports.addTransactionToStore = addTransactionToStore;
exports.getPastTransactions = getPastTransactions;
const store_js_1 = require("../reactive/store.js");
const domains_js_1 = require("../utils/domains.js");
const fetch_js_1 = require("../utils/fetch.js");
const transactionsByAddress = new Map();
/**
 * Retrieve the transaction store for a given address.
 * @param address - The address to retrieve the transaction store for.
 * @returns A store of transactions for the given account to subscribe to.
 * @transaction
 * @example
 * ```ts
 * import { getTransactionStore } from "thirdweb/transaction";
 *
 * const store = getTransactionStore("0x...");
 * store.subscribe((transactions) => {
 *   console.log(transactions);
 * });
 * ```
 */
function getTransactionStore(address) {
    const existingStore = transactionsByAddress.get(address);
    if (existingStore) {
        return existingStore;
    }
    const newStore = (0, store_js_1.createStore)([]);
    transactionsByAddress.set(address, newStore);
    return newStore;
}
/**
 * @internal
 */
function addTransactionToStore(options) {
    const { address, transactionHash, chainId } = options;
    const tranasctionStore = getTransactionStore(address);
    tranasctionStore.setValue([
        ...tranasctionStore.getValue(),
        { transactionHash, chainId },
    ]);
    transactionsByAddress.set(address, tranasctionStore);
}
/**
 * @internal for now
 */
async function getPastTransactions(options) {
    const { walletAddress, chain, client } = options;
    const oneMonthsAgoInSeconds = Math.floor((Date.now() - 1 * 30 * 24 * 60 * 60 * 1000) / 1000);
    const url = new URL(`https://${(0, domains_js_1.getThirdwebDomains)().insight}/v1/wallets/${walletAddress}/transactions`);
    url.searchParams.set("limit", "10");
    url.searchParams.set("chain", chain.id.toString());
    url.searchParams.set("filter_block_timestamp_gte", oneMonthsAgoInSeconds.toString());
    const clientFetch = (0, fetch_js_1.getClientFetch)(client);
    const result = await clientFetch(url.toString());
    const json = (await result.json());
    return json.data.map((tx) => ({
        transactionHash: tx.hash,
        chainId: tx.chain_id,
        receipt: {
            status: tx.status === 1 ? "success" : "failed",
            to: tx.to_address,
        },
    }));
}
//# sourceMappingURL=transaction-store.js.map